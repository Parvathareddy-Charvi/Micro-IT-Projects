<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Student Management System</title>
  <style>
    /* Reset & basic styling */
    * {
      box-sizing: border-box;
    }
    body {
      font-family: Arial, sans-serif;
      background: #f9fafb;
      margin: 0;
      padding: 20px;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    .container {
      max-width: 900px;
      margin: auto;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
    }

    /* Form styles */
    form {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    form input, form select, form button {
      padding: 10px;
      font-size: 1rem;
      border-radius: 6px;
      border: 1px solid #ccc;
      width: 100%;
    }
    form button {
      background: #2563eb;
      color: white;
      border: none;
      cursor: pointer;
      transition: background 0.3s;
    }
    form button:hover {
      background: #1e40af;
    }

    /* Search bar */
    #searchInput {
      width: 100%;
      padding: 10px;
      margin-bottom: 20px;
      font-size: 1rem;
      border-radius: 6px;
      border: 1px solid #ccc;
    }

    /* Table styling */
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 10px;
    }
    th, td {
      text-align: center;
      padding: 10px;
      border-bottom: 1px solid #e5e7eb;
    }
    th {
      background: #f3f4f6;
    }
    td.actions button {
      margin: 0 5px;
      padding: 6px 12px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      color: white;
      font-weight: bold;
      font-size: 0.9rem;
    }
    .btn-edit {
      background: #3b82f6;
    }
    .btn-delete {
      background: #ef4444;
    }
    .btn-save {
      background: #10b981;
    }
    .btn-cancel {
      background: #6b7280;
    }
    .btn-toggle-attendance {
      background: #fbbf24;
      color: black;
    }

    /* Attendance status styles */
    .present {
      background-color: #d1fae5;
      color: #065f46;
      font-weight: bold;
    }
    .absent {
      background-color: #fee2e2;
      color: #991b1b;
      font-weight: bold;
    }

    /* Responsive */
    @media (max-width: 600px) {
      form {
        grid-template-columns: 1fr;
      }
      th, td {
        font-size: 0.9rem;
      }
    }
  </style>
</head>
<body>

  <h1>Student Management System</h1>

  <div class="container">
    <form id="studentForm">
      <input type="text" id="name" placeholder="Student Name" required />
      <input type="text" id="roll" placeholder="Roll Number" required />
      <select id="grade" required>
        <option value="">Select Grade</option>
        <option>O</option>
        <option>A+</option>
        <option>A</option>
        <option>B+</option>
        <option>B</option>
        <option>C</option>
        <option>U</option>
      </select>
      <button type="submit">Add Student</button>
    </form>

    <input type="text" id="searchInput" placeholder="Search by name or roll no..." />

    <table id="studentTable">
      <thead>
        <tr>
          <th>Name</th>
          <th>Roll No</th>
          <th>Grade</th>
          <th>Attendance</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Students will be dynamically added here -->
      </tbody>
    </table>
  </div>

  <script>
    // Grab elements
    const form = document.getElementById('studentForm');
    const nameInput = document.getElementById('name');
    const rollInput = document.getElementById('roll');
    const gradeInput = document.getElementById('grade');
    const studentTableBody = document.querySelector('#studentTable tbody');
    const searchInput = document.getElementById('searchInput');

    // Students array (load from localStorage or empty)
    let students = JSON.parse(localStorage.getItem('students')) || [];

    // Render student list
    function renderStudents(filter = '') {
      studentTableBody.innerHTML = '';
      const filteredStudents = students.filter(s => 
        s.name.toLowerCase().includes(filter.toLowerCase()) ||
        s.roll.toLowerCase().includes(filter.toLowerCase())
      );

      filteredStudents.forEach((student, index) => {
        const tr = document.createElement('tr');
        tr.dataset.index = index;

        tr.innerHTML = `
          <td class="name">${student.name}</td>
          <td class="roll">${student.roll}</td>
          <td class="grade">${student.grade}</td>
          <td class="attendance ${student.attendance ? 'present' : 'absent'}">${student.attendance ? 'Present' : 'Absent'}</td>
          <td class="actions">
            <button class="btn-toggle-attendance" onclick="toggleAttendance(${index})">Toggle Attendance</button>
            <button class="btn-edit" onclick="startEdit(${index})">Edit</button>
            <button class="btn-delete" onclick="deleteStudent(${index})">Delete</button>
          </td>
        `;
        studentTableBody.appendChild(tr);
      });
    }

    // Save to localStorage
    function saveStudents() {
      localStorage.setItem('students', JSON.stringify(students));
    }

    // Add new student
    form.addEventListener('submit', e => {
      e.preventDefault();
      const name = nameInput.value.trim();
      const roll = rollInput.value.trim();
      const grade = gradeInput.value;

      // Check duplicate roll no.
      if (students.some(s => s.roll.toLowerCase() === roll.toLowerCase())) {
        alert('Roll number must be unique!');
        return;
      }

      students.push({ name, roll, grade, attendance: false });
      saveStudents();
      renderStudents();
      form.reset();
    });

    // Delete student
    function deleteStudent(index) {
      if (confirm('Are you sure you want to delete this student?')) {
        students.splice(index, 1);
        saveStudents();
        renderStudents(searchInput.value);
      }
    }

    // Toggle attendance
    function toggleAttendance(index) {
      students[index].attendance = !students[index].attendance;
      saveStudents();
      renderStudents(searchInput.value);
    }

    // Start edit mode
    function startEdit(index) {
      const tr = studentTableBody.querySelector(`tr[data-index="${index}"]`);
      const student = students[index];

      tr.innerHTML = `
        <td><input type="text" id="edit-name-${index}" value="${student.name}" /></td>
        <td><input type="text" id="edit-roll-${index}" value="${student.roll}" /></td>
        <td>
          <select id="edit-grade-${index}">
            <option${student.grade === 'O' ? ' selected' : ''}>O</option>
            <option${student.grade === 'A+' ? ' selected' : ''}>A+</option>
            <option${student.grade === 'A' ? ' selected' : ''}>A</option>
            <option${student.grade === 'B+' ? ' selected' : ''}>B+</option>
            <option${student.grade === 'B' ? ' selected' : ''}>B</option>
            <option${student.grade === 'C' ? ' selected' : ''}>C</option>
            <option${student.grade === 'U' ? ' selected' : ''}>U</option>
          </select>
        </td>
        <td class="attendance ${student.attendance ? 'present' : 'absent'}">${student.attendance ? 'Present' : 'Absent'}</td>
        <td class="actions">
          <button class="btn-save" onclick="saveEdit(${index})">Save</button>
          <button class="btn-cancel" onclick="renderStudents(searchInput.value)">Cancel</button>
        </td>
      `;
    }

    // Save edited student
    function saveEdit(index) {
      const editedName = document.getElementById(`edit-name-${index}`).value.trim();
      const editedRoll = document.getElementById(`edit-roll-${index}`).value.trim();
      const editedGrade = document.getElementById(`edit-grade-${index}`).value;

      if (!editedName || !editedRoll || !editedGrade) {
        alert('Please fill all fields!');
        return;
      }

      // Check for duplicate roll number (excluding current)
      if (students.some((s, i) => s.roll.toLowerCase() === editedRoll.toLowerCase() && i !== index)) {
        alert('Roll number must be unique!');
        return;
      }

      students[index].name = editedName;
      students[index].roll = editedRoll;
      students[index].grade = editedGrade;

      saveStudents();
      renderStudents(searchInput.value);
    }

    // Search filter
    searchInput.addEventListener('input', e => {
      renderStudents(e.target.value);
    });

    // Initial render
    renderStudents();

    // Expose functions globally
    window.deleteStudent = deleteStudent;
    window.toggleAttendance = toggleAttendance;
    window.startEdit = startEdit;
    window.saveEdit = saveEdit;
  </script>
</body>
</html>
